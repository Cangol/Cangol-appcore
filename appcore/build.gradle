apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.saliman.cobertura'
apply from: '../maven_push.gradle'
apply from: '../config/quality.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.so'])
    implementation "com.android.support:support-v4:$support_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    implementation 'com.squareup.okio:okio:2.2.2'
}

android {
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    compileSdkVersion Integer.decode("$sdk_version")
    buildToolsVersion "$build_version"

    defaultConfig {
        minSdkVersion Integer.decode("$min_version")
        versionCode Integer.decode("${POM_VERSION_CODE}")
        versionName "${POM_VERSION}"
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    androidExtensions {
        experimental = true
    }
}

//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
//        return // Skip debug builds.
//    }
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    task.exclude '**/BuildConfig.class'
//    task.exclude '**/R.class'
//    task.manifest{
//        attributes(
//                "Implementation-Title": project.name,
//                "Implementation-Version": version
//        )
//    }
//    artifacts.add('archives', task)
//}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    options {
        encoding "UTF-8"
        links "http://docs.oracle.com/javase/8/docs/api/"
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/properties.xml'
    destinationDir = file("../docs/")
}
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
}
task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/properties.xml'
}
artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.coveralls {
    dependsOn 'check'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}
