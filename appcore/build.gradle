apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.saliman.cobertura'
apply from: '../maven_push.gradle'
apply from: '../config/quality.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.so'])
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.squareup.okio:okio:1.11.0'
    testImplementation  'junit:junit:4.12'
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        versionCode Integer.decode("${POM_VERSION_CODE}")
        versionName "${POM_VERSION}"
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries false
        //dexInProcess  true
        jumboMode true
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.exclude '**/BuildConfig.class'
    task.exclude '**/R.class'
    task.manifest{
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version
        )
    }
    artifacts.add('archives', task)
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}
//
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    //classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //classpath += project.files(configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding "UTF-8"
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/properties.xml'
    destinationDir = file("../docs/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.coveralls {
    dependsOn 'check'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}
