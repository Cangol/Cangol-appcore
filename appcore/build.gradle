apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar','*.so'])
    compile 'com.android.support:support-v13:22.0.0'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.0"

    defaultConfig {
        minSdkVersion 13
        targetSdkVersion 22
        versionCode 3
        versionName "1.0.3"
    }
    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.exclude '**/BuildConfig.class'
    task.exclude '**/R.class'
    artifacts.add('archives', task);
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}
//
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //classpath += project.files(configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding "UTF-8"
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/properties.xml'

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

version = properties.getProperty("LIBRARY_VERSION")
group= properties.getProperty("GROUP_ID")

bintray (){

    user = properties.getProperty("BINTRAY.USER")
    key = properties.getProperty("BINTRAY.APIKEY")

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = properties.getProperty("LIBRARY_NAME")
        desc = properties.getProperty("LIBRARY_DESCRIPTION")
        websiteUrl = properties.getProperty("SITE_URL")
        vcsUrl = properties.getProperty("GIT_URL")
        licenses = ["Apache-2.0"]
        labels = ['android','core']
        publish = true
        publicDownloadNumbers = true
        version {
            desc = properties.getProperty("LIBRARY_DESCRIPTION")
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("BINTRAY.GPG.PASSWORD")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        //This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'jar'
                groupId properties.getProperty("GROUP_ID")
                artifactId properties.getProperty("ARTIFACT_NAME")

                // Add your description here
                name properties.getProperty("LIBRARY_NAME")
                description properties.getProperty("LIBRARY_DESCRIPTION")
                url properties.getProperty("SITE_URL")

                // Set your license
                licenses {
                    license {
                        name properties.getProperty("LICENSE_NAME")
                        url properties.getProperty("LICENSE_URL")
                    }
                }
                developers {
                    developer {
                        id properties.getProperty("DEVELOPER_ID")
                        name properties.getProperty("DEVELOPER_NAME")
                        email properties.getProperty("DEVELOPER_EMAIL")
                    }
                }
                scm {
                    connection properties.getProperty("GIT_URL")
                    developerConnection properties.getProperty("GIT_URL")
                    url properties.getProperty("SITE_URL")

                }
            }
        }
    }
}
