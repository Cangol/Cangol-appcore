apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'net.saliman.cobertura'
apply from: 'config/quality.gradle'
//apply from: 'config/coverage.gradle'
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar', '*.so'])
    compile 'com.android.support:support-v4:[23.0.0,)'
    testCompile 'junit:junit:4.12'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.0"

    defaultConfig {
        minSdkVersion 8
        versionCode 5
        versionName "1.0.5"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    task.exclude '**/BuildConfig.class'
    task.exclude '**/R.class'
    task.manifest{
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version
        )
    }
    artifacts.add('archives', task);
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}
//
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    //classpath += project.files(configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding "UTF-8"
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/properties.xml'

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

cobertura{
    coverageFormats = ['html', 'xml']
    coverageSourceDirs = android.sourceSets.main.java.srcDirs
}
tasks.coveralls {
    dependsOn 'check'
}
apply from: '../maven_push.gradle'

