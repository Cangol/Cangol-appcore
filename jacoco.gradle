/*
 *
 *  Copyright (c) 2013 Cangol
 *   <p/>
 *   Licensed under the Apache License, Version 2.0 (the "License")
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *  <p/>
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  <p/>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion "0.7.6.201602180812"
}

def jacocoDaggerMap = [:]

task jacocoTestReportAndroidTest( type: JacocoReport, dependsOn: "connectedAndroidTest" ) {
    def coverageSourceDirs = [
            'src/main/java'
    ]
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        csv.enabled false
        xml {
            enabled true
            destination "${ buildDir }/reports/jacoco/jacocoXml"
        }
        html {
            enabled true
            destination "${ buildDir }/reports/jacocoHtml"
        }
    }

    classDirectories = fileTree(
            dir: "${ buildDir }/intermediates/classes/debug",
            exclude: [
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Activity*.*',
                    '**/*Fragment*.*',
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewInjector*.class',
                    '**/RestServiceFactory*.class',
                    '**/ActivityModule*.class',
                    '**/preference/*.class',
                    '**/*Entity.class',
                    '**/*Model.class'
            ])
    sourceDirectories = files( coverageSourceDirs )
    additionalSourceDirs = files( coverageSourceDirs )

    if( project.hasProperty( 'coverageFiles' ) ) {

        // convert the comma separated string to an array to create an aggregate report from
        // multiple coverage.ec files
        def coverageFilesArray = coverageFiles.split( ',' )
        executionData = files(coverageFilesArray)

    } else {

        executionData = files( 'build/outputs/code-coverage/connected/coverage.ec' )

    }

}
tasks.coveralls {
    dependsOn 'check'
}